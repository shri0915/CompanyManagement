#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompanyManagementDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Company_2")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeProject(EmployeeProject instance);
    partial void UpdateEmployeeProject(EmployeeProject instance);
    partial void DeleteEmployeeProject(EmployeeProject instance);
    partial void InsertEmployeeTask(EmployeeTask instance);
    partial void UpdateEmployeeTask(EmployeeTask instance);
    partial void DeleteEmployeeTask(EmployeeTask instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectTask(ProjectTask instance);
    partial void UpdateProjectTask(ProjectTask instance);
    partial void DeleteProjectTask(ProjectTask instance);
    partial void InsertProjectTechnology(ProjectTechnology instance);
    partial void UpdateProjectTechnology(ProjectTechnology instance);
    partial void DeleteProjectTechnology(ProjectTechnology instance);
    partial void InsertRoleMaster(RoleMaster instance);
    partial void UpdateRoleMaster(RoleMaster instance);
    partial void DeleteRoleMaster(RoleMaster instance);
    partial void InsertStatusMaster(StatusMaster instance);
    partial void UpdateStatusMaster(StatusMaster instance);
    partial void DeleteStatusMaster(StatusMaster instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskTechnology(TaskTechnology instance);
    partial void UpdateTaskTechnology(TaskTechnology instance);
    partial void DeleteTaskTechnology(TaskTechnology instance);
    partial void InsertTechnology(Technology instance);
    partial void UpdateTechnology(Technology instance);
    partial void DeleteTechnology(Technology instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::CompanyManagementDataLayer.Properties.Settings.Default.Company_2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this.GetTable<EmployeeProject>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this.GetTable<EmployeeTask>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTask> ProjectTasks
		{
			get
			{
				return this.GetTable<ProjectTask>();
			}
		}
		
		public System.Data.Linq.Table<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this.GetTable<ProjectTechnology>();
			}
		}
		
		public System.Data.Linq.Table<RoleMaster> RoleMasters
		{
			get
			{
				return this.GetTable<RoleMaster>();
			}
		}
		
		public System.Data.Linq.Table<StatusMaster> StatusMasters
		{
			get
			{
				return this.GetTable<StatusMaster>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskTechnology> TaskTechnologies
		{
			get
			{
				return this.GetTable<TaskTechnology>();
			}
		}
		
		public System.Data.Linq.Table<Technology> Technologies
		{
			get
			{
				return this.GetTable<Technology>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _ClientName;
		
		private string _ClientLocation;
		
		private int _DepartmentID;
		
		private EntitySet<Project> _Projects;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientLocationChanging(string value);
    partial void OnClientLocationChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Client()
		{
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLocation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ClientLocation
		{
			get
			{
				return this._ClientLocation;
			}
			set
			{
				if ((this._ClientLocation != value))
				{
					this.OnClientLocationChanging(value);
					this.SendPropertyChanging();
					this._ClientLocation = value;
					this.SendPropertyChanged("ClientLocation");
					this.OnClientLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Projects", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Client", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentID;
		
		private string _DepartmentName;
		
		private string _DepartmentLocation;
		
		private int _DepartmentHeadID;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Project> _Projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnDepartmentLocationChanging(string value);
    partial void OnDepartmentLocationChanged();
    partial void OnDepartmentHeadIDChanging(int value);
    partial void OnDepartmentHeadIDChanged();
    #endregion
		
		public Department()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentLocation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DepartmentLocation
		{
			get
			{
				return this._DepartmentLocation;
			}
			set
			{
				if ((this._DepartmentLocation != value))
				{
					this.OnDepartmentLocationChanging(value);
					this.SendPropertyChanging();
					this._DepartmentLocation = value;
					this.SendPropertyChanged("DepartmentLocation");
					this.OnDepartmentLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentHeadID", DbType="Int NOT NULL")]
		public int DepartmentHeadID
		{
			get
			{
				return this._DepartmentHeadID;
			}
			set
			{
				if ((this._DepartmentHeadID != value))
				{
					this.OnDepartmentHeadIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentHeadID = value;
					this.SendPropertyChanged("DepartmentHeadID");
					this.OnDepartmentHeadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Client", Storage="_Clients", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Project", Storage="_Projects", ThisKey="DepartmentID", OtherKey="DepartmentID")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		private int _DepartmentID;
		
		private string _EmployeeDesignation;
		
		private string _EmployeeAddress;
		
		private string _EmployeeContact;
		
		private EntitySet<EmployeeProject> _EmployeeProjects;
		
		private EntitySet<EmployeeTask> _EmployeeTasks;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnEmployeeDesignationChanging(string value);
    partial void OnEmployeeDesignationChanged();
    partial void OnEmployeeAddressChanging(string value);
    partial void OnEmployeeAddressChanged();
    partial void OnEmployeeContactChanging(string value);
    partial void OnEmployeeContactChanged();
    #endregion
		
		public Employee()
		{
			this._EmployeeProjects = new EntitySet<EmployeeProject>(new Action<EmployeeProject>(this.attach_EmployeeProjects), new Action<EmployeeProject>(this.detach_EmployeeProjects));
			this._EmployeeTasks = new EntitySet<EmployeeTask>(new Action<EmployeeTask>(this.attach_EmployeeTasks), new Action<EmployeeTask>(this.detach_EmployeeTasks));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeDesignation", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeDesignation
		{
			get
			{
				return this._EmployeeDesignation;
			}
			set
			{
				if ((this._EmployeeDesignation != value))
				{
					this.OnEmployeeDesignationChanging(value);
					this.SendPropertyChanging();
					this._EmployeeDesignation = value;
					this.SendPropertyChanged("EmployeeDesignation");
					this.OnEmployeeDesignationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAddress", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeAddress
		{
			get
			{
				return this._EmployeeAddress;
			}
			set
			{
				if ((this._EmployeeAddress != value))
				{
					this.OnEmployeeAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAddress = value;
					this.SendPropertyChanged("EmployeeAddress");
					this.OnEmployeeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeContact", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string EmployeeContact
		{
			get
			{
				return this._EmployeeContact;
			}
			set
			{
				if ((this._EmployeeContact != value))
				{
					this.OnEmployeeContactChanging(value);
					this.SendPropertyChanging();
					this._EmployeeContact = value;
					this.SendPropertyChanged("EmployeeContact");
					this.OnEmployeeContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProject", Storage="_EmployeeProjects", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this._EmployeeProjects;
			}
			set
			{
				this._EmployeeProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTask", Storage="_EmployeeTasks", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this._EmployeeTasks;
			}
			set
			{
				this._EmployeeTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeProject")]
	public partial class EmployeeProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeProjectID;
		
		private int _EmployeeID;
		
		private int _ProjectID;
		
		private int _EmployeeRoleID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<RoleMaster> _RoleMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeProjectIDChanging(int value);
    partial void OnEmployeeProjectIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnEmployeeRoleIDChanging(int value);
    partial void OnEmployeeRoleIDChanged();
    #endregion
		
		public EmployeeProject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			this._RoleMaster = default(EntityRef<RoleMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeProjectID
		{
			get
			{
				return this._EmployeeProjectID;
			}
			set
			{
				if ((this._EmployeeProjectID != value))
				{
					this.OnEmployeeProjectIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeProjectID = value;
					this.SendPropertyChanged("EmployeeProjectID");
					this.OnEmployeeProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeRoleID", DbType="Int NOT NULL")]
		public int EmployeeRoleID
		{
			get
			{
				return this._EmployeeRoleID;
			}
			set
			{
				if ((this._EmployeeRoleID != value))
				{
					if (this._RoleMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeRoleIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeRoleID = value;
					this.SendPropertyChanged("EmployeeRoleID");
					this.OnEmployeeRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeProject", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeProjects.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjects.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProject", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.EmployeeProjects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjects.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleMaster_EmployeeProject", Storage="_RoleMaster", ThisKey="EmployeeRoleID", OtherKey="RoleID", IsForeignKey=true)]
		public RoleMaster RoleMaster
		{
			get
			{
				return this._RoleMaster.Entity;
			}
			set
			{
				RoleMaster previousValue = this._RoleMaster.Entity;
				if (((previousValue != value) 
							|| (this._RoleMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleMaster.Entity = null;
						previousValue.EmployeeProjects.Remove(this);
					}
					this._RoleMaster.Entity = value;
					if ((value != null))
					{
						value.EmployeeProjects.Add(this);
						this._EmployeeRoleID = value.RoleID;
					}
					else
					{
						this._EmployeeRoleID = default(int);
					}
					this.SendPropertyChanged("RoleMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeTask")]
	public partial class EmployeeTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeTaskID;
		
		private int _EmployeeID;
		
		private int _TaskID;
		
		private System.Nullable<int> _EmployeeTaskStatus;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeTaskIDChanging(int value);
    partial void OnEmployeeTaskIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnEmployeeTaskStatusChanging(System.Nullable<int> value);
    partial void OnEmployeeTaskStatusChanged();
    #endregion
		
		public EmployeeTask()
		{
			this._Employee = default(EntityRef<Employee>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeTaskID
		{
			get
			{
				return this._EmployeeTaskID;
			}
			set
			{
				if ((this._EmployeeTaskID != value))
				{
					this.OnEmployeeTaskIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTaskID = value;
					this.SendPropertyChanged("EmployeeTaskID");
					this.OnEmployeeTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeTaskStatus", DbType="Int")]
		public System.Nullable<int> EmployeeTaskStatus
		{
			get
			{
				return this._EmployeeTaskStatus;
			}
			set
			{
				if ((this._EmployeeTaskStatus != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeTaskStatusChanging(value);
					this.SendPropertyChanging();
					this._EmployeeTaskStatus = value;
					this.SendPropertyChanged("EmployeeTaskStatus");
					this.OnEmployeeTaskStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeTask", Storage="_Employee", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeTasks.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeTasks.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_EmployeeTask", Storage="_StatusMaster", ThisKey="EmployeeTaskStatus", OtherKey="StatusID", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.EmployeeTasks.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.EmployeeTasks.Add(this);
						this._EmployeeTaskStatus = value.StatusID;
					}
					else
					{
						this._EmployeeTaskStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTask", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.EmployeeTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.EmployeeTasks.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectID;
		
		private string _ProjectName;
		
		private System.Nullable<int> _ProjectStatus;
		
		private int _ClientID;
		
		private int _DepartmentID;
		
		private EntitySet<EmployeeProject> _EmployeeProjects;
		
		private EntitySet<ProjectTask> _ProjectTasks;
		
		private EntitySet<ProjectTechnology> _ProjectTechnologies;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnProjectStatusChanging(System.Nullable<int> value);
    partial void OnProjectStatusChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public Project()
		{
			this._EmployeeProjects = new EntitySet<EmployeeProject>(new Action<EmployeeProject>(this.attach_EmployeeProjects), new Action<EmployeeProject>(this.detach_EmployeeProjects));
			this._ProjectTasks = new EntitySet<ProjectTask>(new Action<ProjectTask>(this.attach_ProjectTasks), new Action<ProjectTask>(this.detach_ProjectTasks));
			this._ProjectTechnologies = new EntitySet<ProjectTechnology>(new Action<ProjectTechnology>(this.attach_ProjectTechnologies), new Action<ProjectTechnology>(this.detach_ProjectTechnologies));
			this._Client = default(EntityRef<Client>);
			this._Department = default(EntityRef<Department>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectStatus", DbType="Int")]
		public System.Nullable<int> ProjectStatus
		{
			get
			{
				return this._ProjectStatus;
			}
			set
			{
				if ((this._ProjectStatus != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectStatusChanging(value);
					this.SendPropertyChanging();
					this._ProjectStatus = value;
					this.SendPropertyChanged("ProjectStatus");
					this.OnProjectStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
		public int DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_EmployeeProject", Storage="_EmployeeProjects", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this._EmployeeProjects;
			}
			set
			{
				this._EmployeeProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTask", Storage="_ProjectTasks", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectTask> ProjectTasks
		{
			get
			{
				return this._ProjectTasks;
			}
			set
			{
				this._ProjectTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTechnology", Storage="_ProjectTechnologies", ThisKey="ProjectID", OtherKey="ProjectID")]
		public EntitySet<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this._ProjectTechnologies;
			}
			set
			{
				this._ProjectTechnologies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Project", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Project", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._DepartmentID = value.DepartmentID;
					}
					else
					{
						this._DepartmentID = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_StatusMaster", ThisKey="ProjectStatus", OtherKey="StatusID", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.Projects.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.Projects.Add(this);
						this._ProjectStatus = value.StatusID;
					}
					else
					{
						this._ProjectStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTask")]
	public partial class ProjectTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTaskID;
		
		private int _ProjectID;
		
		private int _TaskID;
		
		private System.Nullable<int> _ProjectTaskStatus;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<StatusMaster> _StatusMaster;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTaskIDChanging(int value);
    partial void OnProjectTaskIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnProjectTaskStatusChanging(System.Nullable<int> value);
    partial void OnProjectTaskStatusChanged();
    #endregion
		
		public ProjectTask()
		{
			this._Project = default(EntityRef<Project>);
			this._StatusMaster = default(EntityRef<StatusMaster>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectTaskID
		{
			get
			{
				return this._ProjectTaskID;
			}
			set
			{
				if ((this._ProjectTaskID != value))
				{
					this.OnProjectTaskIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectTaskID = value;
					this.SendPropertyChanged("ProjectTaskID");
					this.OnProjectTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTaskStatus", DbType="Int")]
		public System.Nullable<int> ProjectTaskStatus
		{
			get
			{
				return this._ProjectTaskStatus;
			}
			set
			{
				if ((this._ProjectTaskStatus != value))
				{
					if (this._StatusMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectTaskStatusChanging(value);
					this.SendPropertyChanging();
					this._ProjectTaskStatus = value;
					this.SendPropertyChanged("ProjectTaskStatus");
					this.OnProjectTaskStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTask", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTasks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTasks.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_ProjectTask", Storage="_StatusMaster", ThisKey="ProjectTaskStatus", OtherKey="StatusID", IsForeignKey=true)]
		public StatusMaster StatusMaster
		{
			get
			{
				return this._StatusMaster.Entity;
			}
			set
			{
				StatusMaster previousValue = this._StatusMaster.Entity;
				if (((previousValue != value) 
							|| (this._StatusMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatusMaster.Entity = null;
						previousValue.ProjectTasks.Remove(this);
					}
					this._StatusMaster.Entity = value;
					if ((value != null))
					{
						value.ProjectTasks.Add(this);
						this._ProjectTaskStatus = value.StatusID;
					}
					else
					{
						this._ProjectTaskStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("StatusMaster");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTask", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.ProjectTasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.ProjectTasks.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectTechnology")]
	public partial class ProjectTechnology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjectTechnologyID;
		
		private int _ProjectID;
		
		private int _TechnologyID;
		
		private string _ProjectTechnologyVersionNumber;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Technology> _Technology;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectTechnologyIDChanging(int value);
    partial void OnProjectTechnologyIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnProjectTechnologyVersionNumberChanging(string value);
    partial void OnProjectTechnologyVersionNumberChanged();
    #endregion
		
		public ProjectTechnology()
		{
			this._Project = default(EntityRef<Project>);
			this._Technology = default(EntityRef<Technology>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTechnologyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjectTechnologyID
		{
			get
			{
				return this._ProjectTechnologyID;
			}
			set
			{
				if ((this._ProjectTechnologyID != value))
				{
					this.OnProjectTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectTechnologyID = value;
					this.SendPropertyChanged("ProjectTechnologyID");
					this.OnProjectTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
		public int ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectTechnologyVersionNumber", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProjectTechnologyVersionNumber
		{
			get
			{
				return this._ProjectTechnologyVersionNumber;
			}
			set
			{
				if ((this._ProjectTechnologyVersionNumber != value))
				{
					this.OnProjectTechnologyVersionNumberChanging(value);
					this.SendPropertyChanging();
					this._ProjectTechnologyVersionNumber = value;
					this.SendPropertyChanged("ProjectTechnologyVersionNumber");
					this.OnProjectTechnologyVersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectTechnology", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectTechnologies.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectTechnologies.Add(this);
						this._ProjectID = value.ProjectID;
					}
					else
					{
						this._ProjectID = default(int);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_ProjectTechnology", Storage="_Technology", ThisKey="TechnologyID", OtherKey="TechnologyID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.ProjectTechnologies.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.ProjectTechnologies.Add(this);
						this._TechnologyID = value.TechnologyID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleMaster")]
	public partial class RoleMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _RoleDescription;
		
		private EntitySet<EmployeeProject> _EmployeeProjects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public RoleMaster()
		{
			this._EmployeeProjects = new EntitySet<EmployeeProject>(new Action<EmployeeProject>(this.attach_EmployeeProjects), new Action<EmployeeProject>(this.detach_EmployeeProjects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleMaster_EmployeeProject", Storage="_EmployeeProjects", ThisKey="RoleID", OtherKey="EmployeeRoleID")]
		public EntitySet<EmployeeProject> EmployeeProjects
		{
			get
			{
				return this._EmployeeProjects;
			}
			set
			{
				this._EmployeeProjects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.RoleMaster = this;
		}
		
		private void detach_EmployeeProjects(EmployeeProject entity)
		{
			this.SendPropertyChanging();
			entity.RoleMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatusMaster")]
	public partial class StatusMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StatusID;
		
		private string _StatusName;
		
		private string _StatusDescription;
		
		private EntitySet<EmployeeTask> _EmployeeTasks;
		
		private EntitySet<Project> _Projects;
		
		private EntitySet<ProjectTask> _ProjectTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    partial void OnStatusDescriptionChanging(string value);
    partial void OnStatusDescriptionChanged();
    #endregion
		
		public StatusMaster()
		{
			this._EmployeeTasks = new EntitySet<EmployeeTask>(new Action<EmployeeTask>(this.attach_EmployeeTasks), new Action<EmployeeTask>(this.detach_EmployeeTasks));
			this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
			this._ProjectTasks = new EntitySet<ProjectTask>(new Action<ProjectTask>(this.attach_ProjectTasks), new Action<ProjectTask>(this.detach_ProjectTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StatusDescription
		{
			get
			{
				return this._StatusDescription;
			}
			set
			{
				if ((this._StatusDescription != value))
				{
					this.OnStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._StatusDescription = value;
					this.SendPropertyChanged("StatusDescription");
					this.OnStatusDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_EmployeeTask", Storage="_EmployeeTasks", ThisKey="StatusID", OtherKey="EmployeeTaskStatus")]
		public EntitySet<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this._EmployeeTasks;
			}
			set
			{
				this._EmployeeTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_Project", Storage="_Projects", ThisKey="StatusID", OtherKey="ProjectStatus")]
		public EntitySet<Project> Projects
		{
			get
			{
				return this._Projects;
			}
			set
			{
				this._Projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatusMaster_ProjectTask", Storage="_ProjectTasks", ThisKey="StatusID", OtherKey="ProjectTaskStatus")]
		public EntitySet<ProjectTask> ProjectTasks
		{
			get
			{
				return this._ProjectTasks;
			}
			set
			{
				this._ProjectTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_Projects(Project entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
		
		private void attach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = this;
		}
		
		private void detach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.StatusMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private string _TaskName;
		
		private string _TaskDescription;
		
		private EntitySet<EmployeeTask> _EmployeeTasks;
		
		private EntitySet<ProjectTask> _ProjectTasks;
		
		private EntitySet<TaskTechnology> _TaskTechnologies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnTaskDescriptionChanging(string value);
    partial void OnTaskDescriptionChanged();
    #endregion
		
		public Task()
		{
			this._EmployeeTasks = new EntitySet<EmployeeTask>(new Action<EmployeeTask>(this.attach_EmployeeTasks), new Action<EmployeeTask>(this.detach_EmployeeTasks));
			this._ProjectTasks = new EntitySet<ProjectTask>(new Action<ProjectTask>(this.attach_ProjectTasks), new Action<ProjectTask>(this.detach_ProjectTasks));
			this._TaskTechnologies = new EntitySet<TaskTechnology>(new Action<TaskTechnology>(this.attach_TaskTechnologies), new Action<TaskTechnology>(this.detach_TaskTechnologies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskDescription", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TaskDescription
		{
			get
			{
				return this._TaskDescription;
			}
			set
			{
				if ((this._TaskDescription != value))
				{
					this.OnTaskDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TaskDescription = value;
					this.SendPropertyChanged("TaskDescription");
					this.OnTaskDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_EmployeeTask", Storage="_EmployeeTasks", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<EmployeeTask> EmployeeTasks
		{
			get
			{
				return this._EmployeeTasks;
			}
			set
			{
				this._EmployeeTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_ProjectTask", Storage="_ProjectTasks", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<ProjectTask> ProjectTasks
		{
			get
			{
				return this._ProjectTasks;
			}
			set
			{
				this._ProjectTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskTechnology", Storage="_TaskTechnologies", ThisKey="TaskID", OtherKey="TaskID")]
		public EntitySet<TaskTechnology> TaskTechnologies
		{
			get
			{
				return this._TaskTechnologies;
			}
			set
			{
				this._TaskTechnologies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_EmployeeTasks(EmployeeTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_ProjectTasks(ProjectTask entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_TaskTechnologies(TaskTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_TaskTechnologies(TaskTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTechnology")]
	public partial class TaskTechnology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskTechnologyID;
		
		private int _TaskID;
		
		private int _TechnologyID;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<Technology> _Technology;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskTechnologyIDChanging(int value);
    partial void OnTaskTechnologyIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    #endregion
		
		public TaskTechnology()
		{
			this._Task = default(EntityRef<Task>);
			this._Technology = default(EntityRef<Technology>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskTechnologyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TaskTechnologyID
		{
			get
			{
				return this._TaskTechnologyID;
			}
			set
			{
				if ((this._TaskTechnologyID != value))
				{
					this.OnTaskTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TaskTechnologyID = value;
					this.SendPropertyChanged("TaskTechnologyID");
					this.OnTaskTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL")]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					if (this._Technology.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_TaskTechnology", Storage="_Task", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.TaskTechnologies.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.TaskTechnologies.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_TaskTechnology", Storage="_Technology", ThisKey="TechnologyID", OtherKey="TechnologyID", IsForeignKey=true)]
		public Technology Technology
		{
			get
			{
				return this._Technology.Entity;
			}
			set
			{
				Technology previousValue = this._Technology.Entity;
				if (((previousValue != value) 
							|| (this._Technology.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Technology.Entity = null;
						previousValue.TaskTechnologies.Remove(this);
					}
					this._Technology.Entity = value;
					if ((value != null))
					{
						value.TaskTechnologies.Add(this);
						this._TechnologyID = value.TechnologyID;
					}
					else
					{
						this._TechnologyID = default(int);
					}
					this.SendPropertyChanged("Technology");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Technology")]
	public partial class Technology : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TechnologyID;
		
		private string _TechnologyName;
		
		private EntitySet<ProjectTechnology> _ProjectTechnologies;
		
		private EntitySet<TaskTechnology> _TaskTechnologies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTechnologyIDChanging(int value);
    partial void OnTechnologyIDChanged();
    partial void OnTechnologyNameChanging(string value);
    partial void OnTechnologyNameChanged();
    #endregion
		
		public Technology()
		{
			this._ProjectTechnologies = new EntitySet<ProjectTechnology>(new Action<ProjectTechnology>(this.attach_ProjectTechnologies), new Action<ProjectTechnology>(this.detach_ProjectTechnologies));
			this._TaskTechnologies = new EntitySet<TaskTechnology>(new Action<TaskTechnology>(this.attach_TaskTechnologies), new Action<TaskTechnology>(this.detach_TaskTechnologies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TechnologyID
		{
			get
			{
				return this._TechnologyID;
			}
			set
			{
				if ((this._TechnologyID != value))
				{
					this.OnTechnologyIDChanging(value);
					this.SendPropertyChanging();
					this._TechnologyID = value;
					this.SendPropertyChanged("TechnologyID");
					this.OnTechnologyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnologyName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TechnologyName
		{
			get
			{
				return this._TechnologyName;
			}
			set
			{
				if ((this._TechnologyName != value))
				{
					this.OnTechnologyNameChanging(value);
					this.SendPropertyChanging();
					this._TechnologyName = value;
					this.SendPropertyChanged("TechnologyName");
					this.OnTechnologyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_ProjectTechnology", Storage="_ProjectTechnologies", ThisKey="TechnologyID", OtherKey="TechnologyID")]
		public EntitySet<ProjectTechnology> ProjectTechnologies
		{
			get
			{
				return this._ProjectTechnologies;
			}
			set
			{
				this._ProjectTechnologies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Technology_TaskTechnology", Storage="_TaskTechnologies", ThisKey="TechnologyID", OtherKey="TechnologyID")]
		public EntitySet<TaskTechnology> TaskTechnologies
		{
			get
			{
				return this._TaskTechnologies;
			}
			set
			{
				this._TaskTechnologies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_ProjectTechnologies(ProjectTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
		
		private void attach_TaskTechnologies(TaskTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Technology = this;
		}
		
		private void detach_TaskTechnologies(TaskTechnology entity)
		{
			this.SendPropertyChanging();
			entity.Technology = null;
		}
	}
}
#pragma warning restore 1591
